1.Linked List Cycle II

public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null){
            return null;
        }

        ListNode slow = head;
        ListNode fast = head;

        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;

            if(slow == fast){
                slow=head;
                while(slow!=fast){
                    fast=fast.next;
                    slow=slow.next;
                }
                return slow;
            }
        }
        return null;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Middle of the Linked List

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;

       while(fast!=null && fast.next!=null){
           slow=slow.next;
           fast=fast.next.next;
       }
       return slow;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Palindrome Linked List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode fast = head, slow = head, prev, temp;

        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }

        prev = slow;
        slow = slow.next;
        prev.next = null;

        while(slow!=null){
            temp = slow.next;
            slow.next = prev;
            prev = slow;
            slow = temp; 
        }

        fast = head;
        slow = prev;

        while(slow!=null){
            if(fast.val!=slow.val)return false;
            fast = fast.next;
            slow = slow.next;
        }
        return true;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Merge Two Sorted Lists

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummyHead = new ListNode();
        ListNode tail = dummyHead;
        while(list1!=null && list2!=null){
        if(list1.val<list2.val){
           tail.next=list1;
           list1=list1.next;
           tail=tail.next;
        }else{
           tail.next=list2;
           list2=list2.next;
           tail=tail.next;
        }
        }
        tail.next=(list1!=null)?list1:list2;
        return dummyHead.next;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Sort List
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode merge(ListNode l1,ListNode l2){
        ListNode dummy = new ListNode(0);
        ListNode tail=dummy;
        while(l1!=null && l2!=null){
            if(l1.val<l2.val){
                tail.next=l1;
                l1=l1.next;
                tail=tail.next;
            }else{
                tail.next=l2;
                l2=l2.next;
                tail=tail.next;
            }
        }
        tail.next=(l1!=null)?l1:l2;
        return dummy.next;
    }
public ListNode sortList(ListNode head) {
    if (head == null || head.next == null)
      return head;
        ListNode prev=null;
        ListNode fast=head;
        ListNode slow=head;

        while(fast!=null && fast.next!=null){
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        prev.next=null;
        ListNode left = sortList(head);
        ListNode right = sortList(slow);

        return merge(left,right);
    }
}
